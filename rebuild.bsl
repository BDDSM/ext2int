Перем Корень; // реквизит формы в оригинале 

Процедура КнопкаНажатие(Элемент)

	 Корень = "Z:\Users\klimenko\Documents\Миграция_XML";
	
	 ИзменитьИдентификаторы(Корень, "Отчет");
	 ИзменитьИдентификаторы(Корень, "Обработка");
	
КонецПроцедуры

Процедура ИзменитьИдентификаторы(Каталог, ТипФайлов)
	
	Если ТипФайлов = "Отчет" Тогда
		Подкаталог = "Reports";
		Тип = "Report";
	ИначеЕсли ТипФайлов = "Обработка" Тогда
		Подкаталог = "DataProcessors";
		Тип = "DataProcessor";
	Иначе
		ВызватьИсключение "НеизвестныйТипФайлов";
	КонецЕсли;
	
	ПравилаОсновногоФайла = ПолучитьПравилаОсновногоФайла(Тип);
	
	Для Каждого Файл Из НайтиФайлы(Каталог + "\" + Подкаталог, "*.xml") Цикл
		
		ИмяОбъекта = Файл.ИмяБезРасширения;
		ИмяОбъектаОригинальное = "";
		ЗаменыИД = Новый Соответствие;
		
		ПересобратьФайлПоПравилам(Файл.ПолноеИмя, ПравилаОсновногоФайла, Тип, ИмяОбъекта, ИмяОбъектаОригинальное, ЗаменыИД);
		
		ПравилаПодчиненныхФайлов = ПолучитьПравилаПодчиненныхФайлов(Тип, ИмяОбъектаОригинальное);
		
		Для Каждого ПодчиненныйФайл Из НайтиФайлы(Каталог + "\" + Подкаталог + "\" + ИмяОбъекта, "*.xml", Истина) Цикл
			
			ПересобратьФайлПоПравилам(ПодчиненныйФайл.ПолноеИмя, ПравилаПодчиненныхФайлов, Тип, ИмяОбъекта, ИмяОбъектаОригинальное, ЗаменыИД); 
			
		КонецЦикла;
		
		ИзменитьПодчиненныеФайлыFormBIN(Каталог + "\" + Подкаталог + "\" + ИмяОбъекта, ЗаменыИД);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПравилаОсновногоФайла(Тип)
	
	ЗаменаЭлементов = Новый Массив;
	ЗаменаЭлементов.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть,Имя", "\MetaDataObject",                                           "External" + Тип),     Новый Структура("Имя", Код("Тип"))));
	ЗаменаЭлементов.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть,Имя", "\MetaDataObject\" + Тип + "\InternalInfo",                  "xr:ContainedObject"), Новый Структура("Имя", Стр("xr:GeneratedType"))));
	ЗаменаЭлементов.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть,Имя", "\MetaDataObject\" + Тип + "\InternalInfo\xr:GeneratedType", "xr:ClassId"),         Новый Структура("Имя", Стр("xr:TypeId"))));
	ЗаменаЭлементов.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть,Имя", "\MetaDataObject\" + Тип + "\InternalInfo\xr:GeneratedType", "xr:ObjectId"),        Новый Структура("Имя", Стр("xr:ValueId"))));
	
	Код_Значение_3 = Код("СтрПолучитьСтроку(СтрЗаменить(Значение, Точка, Символы.ПС), 3)");
	Код_Значение_4 = Код("СтрПолучитьСтроку(СтрЗаменить(Значение, Точка, Символы.ПС), 4)");
	
	ЗаменаАтрибутов = Новый Массив;
	Замена = Новый Структура("Условия,Замена", Новый Массив, Неопределено);
	Замена.Условия.Добавить("ТекущийПуть" + "=" + """\MetaDataObject\" + Тип + "\InternalInfo\xr:GeneratedType""");
	Замена.Условия.Добавить("Имя"         + "=" + """name""");
	Замена.Замена = Новый Структура("Значение", Код("Тип") + "+" + Стр("Object.") + "+" + Код("ИмяОбъекта"));
	ЗаменаАтрибутов.Добавить(Замена);
	
	Замена = Новый Структура("Условия,Замена,Повторяется", Новый Массив, Неопределено, Истина);
	Замена.Условия.Добавить("ИмяУзла" + "=" + """xr:GeneratedType""");
	Замена.Условия.Добавить("Имя"     + "=" + """name""");
	Замена.Условия.Добавить("СтрНачинаетсяС(Значение, """ + Тип + "TabularSection."")");
	Замена.Замена = Новый Структура("Значение", Код("Тип") + "+" + Стр("TabularSection.") + "+" + Код("ИмяОбъекта") + "+" + Стр(".") + "+" + Код_Значение_3);
	ЗаменаАтрибутов.Добавить(Замена);
	
	Замена = Новый Структура("Условия,Замена,Повторяется", Новый Массив, Неопределено, Истина);
	Замена.Условия.Добавить("ИмяУзла" + "=" + """xr:GeneratedType""");
	Замена.Условия.Добавить("Имя"     + "=" + """name""");
	Замена.Условия.Добавить("СтрНачинаетсяС(Значение, """ + Тип + "TabularSectionRow."")");
	Замена.Замена = Новый Структура("Значение", Код("Тип") + "+" + Стр("TabularSectionRow.") + "+" + Код("ИмяОбъекта") + "+" + Стр(".") + "+" + Код_Значение_3);
	ЗаменаАтрибутов.Добавить(Замена);
	
	Тип_Имя_34 = Код("Тип") + "+" + Стр(".") + "+" + Код("ИмяОбъекта") + "+" + Стр(".") + "+" + Код_Значение_3 + "+" + Стр(".") + "+" + Код_Значение_4;
	
	ЗаменаТекста = Новый Массив;
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\Name"),                       Новый Структура("Значение", Код("ИмяОбъекта"))));
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\DefaultForm"),                Новый Структура("Значение", Тип_Имя_34)));
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\AuxiliaryForm"),              Новый Структура("Значение", Тип_Имя_34)));
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\MainDataCompositionSchema"),  Новый Структура("Значение", Тип_Имя_34)));
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\DefaultSettingsForm"),        Новый Структура("Значение", Тип_Имя_34)));
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\AuxiliarySettingsForm"),      Новый Структура("Значение", Тип_Имя_34)));
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ТекущийПуть", "\MetaDataObject\" + Тип + "\Properties\DefaultVariantForm"),         Новый Структура("Значение", Тип_Имя_34)));
	
	ЗаменаТекстаИД = Новый Массив;
	ЗаменаТекстаИД.Добавить("xr:TypeId");
	ЗаменаТекстаИД.Добавить("xr:ValueId");
	
	ОбработчикиСобытияЗаменаЭлементовПосле = Новый Соответствие;
	ОбработчикиСобытияЗаменаЭлементовПосле.Вставить(
	"ТекущийПуть = ""\MetaDataObject\"" + Тип + ""\InternalInfo\xr:GeneratedType"" И Чтение.КоличествоАтрибутов() = 0", 
	"Запись.ЗаписатьАтрибут(""name"", Тип + ""Manager."" + ИмяОбъекта);
	|Запись.ЗаписатьАтрибут(""category"", ""Manager"");
	|СтандартнаяОбработка = Ложь;"
	);
	
	ОбработчикиСобытияЗаменаТекстаПеред = Новый Соответствие;
	ОбработчикиСобытияЗаменаТекстаПеред.Вставить(
	"ТекущийПуть = ""\MetaDataObject\"" + Тип + ""\Properties\Name""",
	"ИмяОбъектаОригинальное = Значение"
	);
	
	Правила = Новый Соответствие;
	Правила.Вставить("ЗаменаЭлементов", ЗначениеВСтрокуВнутр(ЗаменаЭлементов));
	Правила.Вставить("ЗаменаАтрибутов", ЗначениеВСтрокуВнутр(ЗаменаАтрибутов));
	Правила.Вставить("ЗаменаТекста",    ЗначениеВСтрокуВнутр(ЗаменаТекста));
	Правила.Вставить("ЗаменаТекстаИД",  ЗначениеВСтрокуВнутр(ЗаменаТекстаИД));
	Правила.Вставить("ОбработчикиСобытияЗаменаЭлементовПосле", ЗначениеВСтрокуВнутр(ОбработчикиСобытияЗаменаЭлементовПосле));
	Правила.Вставить("ОбработчикиСобытияЗаменаТекстаПеред",    ЗначениеВСтрокуВнутр(ОбработчикиСобытияЗаменаТекстаПеред));
	
	//Правила.Вставить("Тип", ЗначениеВСтрокуВнутр(Тип));
	
	Возврат Правила;
	
КонецФункции

Функция ПолучитьПравилаПодчиненныхФайлов(Тип, ИмяОбъектаОригинальное)
	
	ЗаменаТекста = Новый Массив;
	ЗаменаТекста.Добавить(Новый Структура("Условие,Замена", Новый Структура("ИмяУзла,Значение", "v8:Type", "cfg:External" + Тип + "Object." + ИмяОбъектаОригинальное), Новый Структура("Значение", Стр("cfg:" + Тип + "Object.") + "+" + Код("ИмяОбъекта"))));
	
	Правила = Новый Соответствие;
	Правила.Вставить("ЗаменаТекста",    ЗначениеВСтрокуВнутр(ЗаменаТекста));
	
	//Правила.Вставить("Тип", ЗначениеВСтрокуВнутр(Тип));
	
	Возврат Правила;
	
КонецФункции

Процедура ПересобратьФайлПоПравилам(ПолноеИмяФайла, Правила, Тип, ИмяОбъекта, ИмяОбъектаОригинальное, ЗаменыИД)
	
	АлгоритмЗаменыПростой =
	"Если Не МассивЗамен = Неопределено Тогда
	|	Для ИндексВарианта = 0 По МассивЗамен.ВГраница() Цикл
	|		Вариант = МассивЗамен[ИндексВарианта];
	|		Если Вычислить(КодУсловия(Вариант.Условие)) Тогда
	|			Выполнить(КодЗамены(Вариант.Замена));
	|			Если Не Вариант.Свойство(""Повторяется"") ИЛИ Не Вариант.Повторяется Тогда
	|				МассивЗамен.Удалить(ИндексВарианта);
	|			КонецЕсли;
	|			Прервать;
	|		КонецЕсли;
	|	КонецЦикла;
	|КонецЕсли;";
	
	АлгоритмЗаменыСложный = 
	"Если Не МассивЗамен = Неопределено Тогда
	|	Для ИндексВарианта = 0 По МассивЗамен.ВГраница() Цикл
	|		Вариант = МассивЗамен[ИндексВарианта];
	|		Ок = Истина;
	|		Для Каждого Условие Из Вариант.Условия Цикл
	|			Ок = Ок И Вычислить(Условие);
	|			Если Не Ок Тогда
	|				Прервать;
	|			КонецЕсли;
	|		КонецЦикла;
	|		Если Ок Тогда
	|			Выполнить(КодЗамены(Вариант.Замена));
	|			Если Не Вариант.Свойство(""Повторяется"") ИЛИ Не Вариант.Повторяется Тогда
	|				МассивЗамен.Удалить(ИндексВарианта);
	|			КонецЕсли;
	|			Прервать;
	|		КонецЕсли;
	|	КонецЦикла;
	|КонецЕсли;";
	
	АлгоритмОбработчикаСобытия = 
	"СтандартнаяОбработка = Истина;
	|Если Не ОбработчикиСобытия = Неопределено Тогда
	|	Для Каждого УсловиеКод Из ОбработчикиСобытия Цикл
	|		Если Вычислить(УсловиеКод.Ключ) Тогда
	|			Выполнить(УсловиеКод.Значение);
	|			ОбработчикиСобытия.Удалить(УсловиеКод.Ключ);
	|			Прервать;
	|		КонецЕсли;
	|	КонецЦикла;
	|КонецЕсли;";
	
	Точка = ".";
	
	ЗаменаЭлементов = Неопределено;
	ЗаменаАтрибутов = Неопределено;
	ЗаменаТекста = Неопределено;
	ЗаменаТекстаИД = Неопределено;
	ОбработчикиСобытияЗаменаЭлементовПосле = Неопределено;
	ОбработчикиСобытияЗаменаТекстаПеред = Неопределено;
	
	Для Каждого Правило Из Правила Цикл
		Выполнить(Правило.Ключ + " = ЗначениеИзСтрокиВнутр(Правило.Значение)");
	КонецЦикла;
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПолноеИмяФайла);
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	Путь = Новый Массив;
	Путь.Добавить("");
	ТекущийПуть = Путь[Путь.ВГраница()];
	
	СтандартнаяОбработка = Истина;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Запись.ЗаписатьКонецЭлемента();
			Путь.Удалить(Путь.ВГраница());
			ТекущийПуть = Путь[Путь.ВГраница()];
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Имя = Чтение.Имя;
			
			МассивЗамен = ЗаменаЭлементов;
			Выполнить(АлгоритмЗаменыПростой);
			
			ИмяУзла = Имя;
			
			Запись.ЗаписатьНачалоЭлемента(Имя);
			Путь.Добавить(ТекущийПуть + "\" + Имя);
			ТекущийПуть = Путь[Путь.ВГраница()];
			
			ОбработчикиСобытия = ОбработчикиСобытияЗаменаЭлементовПосле;
			Выполнить(АлгоритмОбработчикаСобытия);
			
			Если СтандартнаяОбработка Тогда
				ЧтениеАтрибута = "Чтение.ПервыйАтрибут()";
				Пока Вычислить(ЧтениеАтрибута) Цикл
					Имя = Чтение.Имя;
					Значение = Чтение.Значение;
					Если Имя = "uuid" Тогда
						Если ЗаменыИД.Получить(Значение) = Неопределено Тогда
							ЗаменыИД.Вставить(Значение, Строка(Новый УникальныйИдентификатор()));
						КонецЕсли;
						Значение = ЗаменыИД.Получить(Значение);
					Иначе
						МассивЗамен = ЗаменаАтрибутов;
						Выполнить(АлгоритмЗаменыСложный);
					КонецЕсли;
					Запись.ЗаписатьАтрибут(Имя, Значение);
					ЧтениеАтрибута = "Чтение.СледующийАтрибут()";
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Значение = Чтение.Значение;
			
			ОбработчикиСобытия = ОбработчикиСобытияЗаменаТекстаПеред;
			Выполнить(АлгоритмОбработчикаСобытия);
			
			Если СтандартнаяОбработка Тогда
				
				Если ЗаменаТекстаИД = Неопределено Или ЗаменаТекстаИД.Найти(ИмяУзла) = Неопределено Тогда
					МассивЗамен = ЗаменаТекста;
					Выполнить(АлгоритмЗаменыПростой);
				Иначе
					Если ЗаменыИД.Получить(Значение) = Неопределено Тогда
						ЗаменыИД.Вставить(Значение, Строка(Новый УникальныйИдентификатор()));
					КонецЕсли;
					Значение = ЗаменыИД.Получить(Значение);
				КонецЕсли;
				
			КонецЕсли;
			
			Запись.ЗаписатьТекст(Значение);
			
		КонецЕсли;
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Запись.Закрыть());
	Текст.Записать(ПолноеИмяФайла);
	
КонецПроцедуры

Процедура ИзменитьПодчиненныеФайлыFormBIN(Каталог, ЗаменыИД)
	
	Буферы = Новый Массив;
	
	Для Каждого КлючЗначение Из ЗаменыИД Цикл
		
		Было = Новый БуферДвоичныхДанных(36);
		Стало = Новый БуферДвоичныхДанных(36);
		
		Для Номер = 1 По 36 Цикл
			Было.Установить(Номер-1, КодСимвола(КлючЗначение.Ключ, Номер));
			Стало.Установить(Номер-1, КодСимвола(КлючЗначение.Значение, Номер));
		КонецЦикла;
		
		Буферы.Добавить(Новый Структура("Было,Стало", Было, Стало));
		
	КонецЦикла;
	
	Для Каждого Файл Из НайтиФайлы(Каталог, "Form.bin", Истина) Цикл
		
		Чтение = Новый ЧтениеДанных(Файл.ПолноеИмя);
		ТелоФайла = Чтение.ПрочитатьВБуферДвоичныхДанных();
		Чтение.Закрыть();
		
		Для Каждого БылоСтало Из Буферы Цикл
			
			Разделитель = БылоСтало.Было;
			РазделительНовый = БылоСтало.Стало;
			
			М = ТелоФайла.Разделить(Разделитель);
			
			Смещение = М[0].Размер;
			Для ИндексМассива = 1 По М.ВГраница() Цикл
				Для ИндексСимвола = 0 По РазделительНовый.Размер-1 Цикл
					ТелоФайла.Установить(Смещение + ИндексСимвола, РазделительНовый[ИндексСимвола]);
				КонецЦикла;
				Смещение = Смещение + РазделительНовый.Размер + М[ИндексМассива].Размер;
			КонецЦикла;
			
		КонецЦикла;
		
		Запись = Новый ЗаписьДанных(Файл.ПолноеИмя);
		Запись.ЗаписатьБуферДвоичныхДанных(ТелоФайла);
		Запись.Закрыть();
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодУсловия(Структура)
	Код = "ИСТИНА";
	Для Каждого КЗ Из Структура Цикл
		Код = Код + " И " + КЗ.Ключ + " = """ + КЗ.Значение + """";
	КонецЦикла;
	Возврат Код;
КонецФункции

Функция КодЗамены(Структура)
	Код = "";
	Для Каждого КЗ Из Структура Цикл
		Код = Код + "
		|" + КЗ.Ключ + " = Вычислить(""" + КЗ.Значение + """);"; 
	КонецЦикла;
	Возврат Код;
КонецФункции

Функция Код(Код)
	Возврат "Вычислить(""""""""""""""""""""+" + Код + "+"""""""""""""""""""")";
КонецФункции

Функция Стр(Стр)
	Возврат """""" + Стр + """""";
КонецФункции

Функция СтрНачинаетсяС(Строка, ПодстрокаПоиска)
	Возврат Найти(Строка, ПодстрокаПоиска) = 1;
КонецФункции

